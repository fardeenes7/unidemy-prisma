generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider     = "mysql"
  url          = env("MYSQL_PRISMA_URL")
  relationMode = "prisma"
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Subscription{
  id String @id @default(cuid())
  userId String
  type String
  validUntil DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

enum TransactionType {
  Credit
  Debit
}

model Transaction {
  id        String   @id @default(cuid())
  userId    String?
  amount    Int
  type      TransactionType
  particular String?
  createdAt DateTime @default(now())
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model Sociallink{
  id       String   @id @default(cuid())
  name     String
  url      String
  teacherId String
  teacher  Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  @@index([teacherId])
}

model Teacher{
  id        String   @id @default(cuid())
  image    String?
  bio      String?
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courses   Course[]
  links     Sociallink[]
  @@index([userId])
  @@unique([userId])

}

model User {
  id            String    @id @default(cuid())
  iss           String?
  name          String?
  email         String?   @unique
  role          String    @default("user")
  emailVerified DateTime?
  image         String?
  createdAt     DateTime @default(now())
  balance       Int       @default(0)
  teacher       Teacher?
  accounts      Account[]
  sessions      Session[]
  subscriptions Subscription[]
  lessons       Lesson[]
  posts         Post[]
  purchases     Purchase[]
  transactions  Transaction[]
  reviews       CourseReview[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum PaymentStatus {
  Pending
  Paid
  Failed
}

model Payment{
  id        Int   @id @default(autoincrement())
  status    PaymentStatus @default(Pending)
  amount    Int
  method    String
  account   String
  reference String
  createdAt DateTime @default(now())
  purchaseId Int
  purchase  Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)

  @@index([purchaseId])
}

model Purchase {
  id        Int   @id @default(autoincrement())
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  installment Int?
  dueDate   DateTime?
  hasAccess Boolean @default(false)
  payments  Payment[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}



model Lesson {
  id            Int   @id @default(autoincrement())
  title         String?  @db.Text
  description   String?  @db.Text
  content       String?  @db.Text
  image         String?  @db.Text
  imageBlurhash String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  published     Boolean  @default(false)
  courseId      String?
  chapterId     Int?
  userId        String?
  course        Course?    @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chapter       Chapter?    @relation(fields: [chapterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([courseId])
  @@index([courseId])
  @@index([userId])
  @@index([chapterId])
}

model Chapter{
  id           Int   @id @default(autoincrement())
  title        String?  @db.Text
  description  String?  @db.Text
  course       Course?    @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courseId     String?
  lessons      Lesson[]
  batches      Batch[]
  @@index([courseId])
}

enum BatchStatus{
  Draft
  AdmissionOpen
  AdmissionClosed
  Started
}

model Batch{
  id        String   @id @default(cuid())
  title     String?
  slug      String?  @unique
  courseId  String?
  status    BatchStatus @default(Draft)
  chapters  Chapter[]
  @@index([courseId])
}

enum Status {
  Draft
  Pending
  Published
}

enum CourseType {
  Recorded
  Live
}

model CourseReview{
  id        Int   @id @default(autoincrement())
  rating    Int
  comment   String?
  courseId  String
  userId    String
  createdAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([courseId, userId])
  @@index([courseId])
  @@index([userId])

}

model Course {
  id            String   @id @default(cuid())
  title         String?
  description   String?  @db.Text
  image         String?  @db.Text
  imageBlurhash String?  @db.Text
  slug          String?  @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  status        Status   @default(Draft)
  type          CourseType @default(Recorded)
  chapters      Chapter[]
  lessons       Lesson[]
  categoryId    String?
  price         Int?
  discountedPrice Int?
  purchases     Purchase[]
  userId        String
  instituteId   String?
  institute     Institute? @relation(fields: [instituteId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  category      CourseCategory? @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teachers      Teacher[]
  reviews       CourseReview[]

  @@index([userId])
  @@index([categoryId])
  @@index([instituteId])
}

model Institute {
  id        String   @id @default(cuid())
  name      String?
  logo      String?
  slug      String?  @unique
  courses   Course[]
}

model CourseCategory {
  id        String   @id @default(cuid())
  name      String?
  slug      String?  @unique
  courses   Course[]
}

enum CouponType {
  Percentage
  Fixed
}

model Coupon {
  id        Int   @id @default(autoincrement())
  code      String?  @unique
  type      CouponType
  value     Int
  quantity  Int
  validUntil DateTime?
}

model Post{
  id            String   @id @default(cuid())
  title         String?  @db.Text
  description   String?  @db.Text
  content       String?  @db.Text
  slug          String   @default(cuid())
  image         String?  @db.Text
  imageBlurhash String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  published     Boolean  @default(false)
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        String?

  @@unique([slug, userId])
  @@index([userId])
}